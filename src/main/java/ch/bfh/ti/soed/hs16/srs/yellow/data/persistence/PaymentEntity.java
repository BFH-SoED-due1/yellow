
/*
 * Copyright (c) 2016 Berner Fachhochschule, Switzerland.
 *
 * Project Smart Reservation System.
 *
 * Distributable under GPL license. See terms of license at gnu.org.
 */

package ch.bfh.ti.soed.hs16.srs.yellow.data.persistence;


import ch.bfh.ti.soed.hs16.srs.yellow.data.service.Payment;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;

/**
 *
 */
@Entity(name = "PaymentEntity")
@Access(AccessType.FIELD)
@Table(name = "Payments")
public class PaymentEntity
        implements Payment,
        Serializable {

    @Id
    @Column(name = "payment_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long ID;

    @Column(name = "is_successful")
    private Boolean isSuccessful = false;

    @Column(name = "pay_sum")
    private BigDecimal sumToPay = new BigDecimal("0.000");

    /**
     * Default constructor. Must be used in order for O/R Mapper to function properly. Must be empty.
     */
    public PaymentEntity() {
    }

    /**
     * @return Autogenerated ID value of the entity
     */
    public Long getID() {
        return ID;
    }

    /**
     * @return check whether a payment is successsful(closed) or open for customer to pay
     */
    public Boolean getIsSuccessful() {
        return isSuccessful;
    }

    /**
     * Sets a new state of the payment
     *
     * @param isSuccessful new state of the payment
     */
    public void setIsSuccessful(Boolean isSuccessful) {
        this.isSuccessful = isSuccessful;
    }

    /**
     * @return Sum on payment as String
     */
    public String getSumToPay() {
        NumberFormat usdCostFormat = NumberFormat.getCurrencyInstance(Locale.US);
        usdCostFormat.setMinimumFractionDigits(1);
        usdCostFormat.setMaximumFractionDigits(2);
        return usdCostFormat.format(sumToPay.doubleValue());
    }

    /**
     * Sets a sum for customer/user to pay
     * @param sumToPay sum to pay as BigDecimal
     */
    public void setSumToPay(BigDecimal sumToPay) {
        this.sumToPay = sumToPay;
    }

}
